---
layout: post
title: "[PGL / Coding Angma] JavaScript Basic"
date: 2022-03-04 20:42:00 +0900
categories: Vanilla-JS
---

✔ LikeLion Core Curriculum React PGL 준비의 일환으로 Coding Angma 자바스크립트 기초 강좌를 수강하며 정리한 내용이다.  
[Coding Angma JavaScript Basic 100min >][Coding Angma JS Basic]

[Coding Angma JS Basic]:https://www.youtube.com/watch?v=KF6t61yuPCY&t=481s
<br/>

#### **웹 사이트 구성 요소**
* HTML(Hyper Text Markup Language) : 웹사이트의 뼈대를 맡는다.
* CSS(Cascading Style Sheet) : 웹사이트의 디자인을 맡는다.
* JS(Java Script) : 크로스플랫폼(Cross Platform, 여러 종류의 플랫폼에서 동작)이며, 객체지향스크립트언어로 웹사이트의 동작을 담당한다.
<br/>
<br/>

#### **변수 Variable**
{% highlight python %}
name = "Mike";
age = 30;
// 세미콜론을 생략가능하지만 붙이도록하자.
{% endhighlight %}
<br/>

#### **변수명 선언 규칙.**
1. 변수명으로는 문자, 숫자, $, _ 만 사용할 수 있다.
2. 첫글자는 숫자가 올 수 없다.
3. 예약어는 변수명으로 사용이 불가능하다.
4. 상수명은 관례상 대문자로 표기하도록한다.
5. 변수명은 이해하기 쉽도록 선언하자.
<br/>
<br/>

#### **출력 함수**
* alert() : 경고창을 띄우는 함수
* console.log() : 콘솔창에 출력하는 함수
* prompt(text, default value) : 창을 띄워 값을 입력받는 함수.
* confirm() : 창을 띄워 확인받는 함수. 확인은 true, 취소는 false 를 반환한다.

기본 창을 띄워 출력하는 함수들은 사용이 매우 쉽고 간편하다는 장점이있지만,
동작시에 사용자가 액션을 취할 때 까지 스크립트가 일시정지된다는 것과 스타일링이 불가능하다는 단점이 있다.
<br/>
<br/>

#### **선언**
* let : 유일한 변수 선언. 기존에 한 번 선언된 변수명을 let으로 다시 선언하는 경우 에러. 값 자체는 변경 가능하며, let을 사용하지 않고 값을 변경해주면 된다.
* const : 절대 바뀌지 않는 상수 값을 선언할때 이용하며, 따라서 구분에 용이하도록 주로 대문자로 작성한다.
Tip : 처음에는 모든 변수를 const로, 그리고 값의 변화가 필요한 변수만 let을 이용하여 선언하도록 하자.
<br/>
<br/>

#### **자동 형변환**
자바스크립트에도 자동형변환이 존재하며 이는 뜻하지 않은 오류를 일으킬 수 있으므로 유의하도록 한다.
<br/>
<br/>

#### **명시적 형변환**
자동형변환으로 인한 오류를 피하기 위해서, 더 이해하기 쉬운 코드를 위해서 명시적 형 변환이 필요하다.
(특히 prompt를 통해서 입력받은 값은 문자형이기 때문에 숫자 값 등을 입력받을때에도 많이 사용된다.)
* string() : 문자형으로 변환
* Number() : 숫자형으로 변환
    + Number("text") -> NaN
    + Number(true) -> 1
    + Number(false, null) -> 0
    + Number(undefined) -> NaN
* Boolean() : 논리형으로 변환
    + Boolean(Everything) -> true
    + Boolean(0, "", null, undefined, NaN) -> false 
<br/>
<br/>

#### **비교연산자**
* == 동등연산자 : 값만 비교한다. 1 == "1"
* === 일치연산자 : 타입까지 비교한다. 1 != "1"
<br/>
&& AND
<br/>
|| OR
<br/>
! NOT
<br/>
<br/>

#### **조건문**
{% highlight python %}
if( 조건1 ) {
    code;
} else if( 조건2 ) {
    code;
} else {
    code;
}
{% endhighlight %}
<br/>

#### **반복문**
* for문
주로 사용되는 반복문이다.
{% highlight python %}
for (선언; 조건; 증감){
    code;
}
{% endhighlight %}
<br/>
* do-while문
적어도 1회 코드가 실행된다는 차이가 있다.
{% highlight python %}
do {
    code;
} while (
    조건
)
{% endhighlight %}
<br/>

#### **분기분**
* break : 반복을 멈추고 반복문 자체를 빠져나온다.
* continue : 이번 반복을 멈추고 다음 반복으로 넘어간다.